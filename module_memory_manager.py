"""
memory_manager.py

Βοηθητικό πρόγραμμα διαχείρισης "μνήμης".
Προσομοιώνει τη δέσμευση και καθαρισμό προσωρινής μνήμης.
"""

# -----------------------------
# Εισαγωγές βιβλιοθηκών
# -----------------------------

import sys              # Για να υπολογίσουμε το πραγματικό μέγεθος του αντικειμένου στη μνήμη
import gc               # Για χειροκίνητο καθαρισμό της μνήμης μέσω του garbage collector
import logging          # Για επαγγελματική καταγραφή μηνυμάτων αντί για print
from typing import Union, Optional  # Για στατική ανάλυση τύπων (type hints)

# -----------------------------
# Ρύθμιση logging
# -----------------------------

logging.basicConfig(
    level=logging.INFO,                      # Επίπεδο καταγραφής (info και πάνω)
    format='%(message)s'                     # Φορμά εμφάνισης μηνυμάτων (χωρίς metadata όπως χρόνος/αρχεία)
)

# -----------------------------
# Συνάρτηση δέσμευσης μνήμης
# -----------------------------

def allocate_memory(N_MB: int = 10, dry_run: bool = False) -> Union[bytearray, None]:
    """
    Δεσμεύει προσωρινά N MB μνήμης.

    :param N_MB: Ποσότητα σε MB (πρέπει να είναι θετικός αριθμός)
    :param dry_run: Αν είναι True, δεν δεσμεύεται πραγματική μνήμη (χρήσιμο για testing ή έλεγχο ροής χωρίς κατανάλωση πόρων)
    :return: Αντικείμενο bytearray με το δεσμευμένο μέγεθος ή None αν dry_run
    """

    # Έλεγχος εγκυρότητας εισόδου
    if N_MB <= 0:
        raise ValueError("❌ Το μέγεθος της μνήμης πρέπει να είναι θετικός αριθμός.")

    # Αν είναι ενεργοποιημένο το dry_run, δεν δεσμεύουμε πραγματική μνήμη
    if dry_run:
        logging.info(f"[DRY-RUN] Θα δεσμευτούν {N_MB}MB προσωρινής μνήμης.")
        return None

    # Δημιουργούμε ένα bytearray μεγέθους N MB
    memory = bytearray(N_MB * 1024 * 1024)

    # Υπολογίζουμε το πραγματικό μέγεθος του αντικειμένου στη μνήμη (συμπεριλαμβανομένων των μεταδεδομένων)
    actual_size = sys.getsizeof(memory) / (1024 * 1024)

    # Έλεγχος αν η δέσμευση έγινε πράγματι
    if memory and len(memory) == N_MB * 1024 * 1024:
        logging.info(f"📦 Δεσμεύτηκαν {N_MB}MB προσωρινής μνήμης.")
        logging.info(f"ℹ️ Πραγματικό μέγεθος στη μνήμη: {actual_size:.2f}MB")
    else:
        logging.warning("⚠️ Η δέσμευση μνήμης φαίνεται να απέτυχε ή δεν ήταν πλήρης.")

    # Επιστροφή του αντικειμένου bytearray
    return memory

# -----------------------------
# Συνάρτηση καθαρισμού μνήμης
# -----------------------------

def clear_memory(memory_block: Optional[bytearray]) -> bool:
    """
    Καθαρίζει την προσωρινή μνήμη που είχε δεσμευτεί.

    :param memory_block: Το αντικείμενο bytearray προς καθαρισμό
    :return: True αν ο καθαρισμός έγινε επιτυχώς, αλλιώς False
    """

    try:
        # Αν έχει δεσμευτεί πραγματική μνήμη (δηλ. όχι dry_run)
        if memory_block is not None:
            size_before = sys.getsizeof(memory_block)  # Προαιρετικά: μέγεθος πριν τον καθαρισμό
            del memory_block                           # Διαγράφουμε τη μεταβλητή (απελευθέρωση αναφοράς)
            gc.collect()                               # Ζητάμε χειροκίνητο καθαρισμό μνήμης
            logging.info("🧹 Η μνήμη καθαρίστηκε επιτυχώς.")
            if size_before > 0:
                logging.info(f"✅ Επιβεβαίωση: καθαρίστηκε {size_before / (1024 * 1024):.2f}MB από τη μνήμη.")
        else:
            # Αν δεν υπάρχει μνήμη προς καθαρισμό (π.χ. dry-run)
            logging.info("⚠️ Δεν υπάρχει μνήμη προς καθαρισμό (ήταν dry-run).")

        return True

    except Exception as e:
        # Αν συμβεί οποιοδήποτε σφάλμα κατά τον καθαρισμό, το καταγράφουμε
        logging.error(f"❌ Αποτυχία καθαρισμού: [{type(e).__name__}] {e}")
        return False

# -----------------------------
# Κυρίως πρόγραμμα (main block)
# -----------------------------

if __name__ == "__main__":
    # Εκκίνηση ελέγχου λειτουργίας όταν εκτελείται το αρχείο αυτόνομα
    logging.info("\n🧪 Εκτελείται έλεγχος του memory_manager.py αυτόνομα...\n")

    # Δοκιμαστική δέσμευση 5MB προσωρινής μνήμης
    block = allocate_memory(5)

    # Έλεγχος αν δεσμεύτηκε όντως μνήμη
    if block:
        logging.info("✅ Η μνήμη δεσμεύτηκε με επιτυχία.")
    else:
        logging.warning("⚠️ Δεν έγινε πραγματική δέσμευση μνήμης.")

    # Προσπάθεια καθαρισμού της μνήμης
    result = clear_memory(block)

    # Έλεγχος αν ο καθαρισμός πέτυχε
    if result:
        logging.info("✅ Ο καθαρισμός της μνήμης επιβεβαιώθηκε.")
    else:
        logging.warning("⚠️ Ο καθαρισμός της μνήμης απέτυχε.")

    # Τελικό μήνυμα ολοκλήρωσης
    logging.info("✅ Ο έλεγχος ολοκληρώθηκε.")
    logging.info("📥 Η καθαρή και δεσμευμένη μνήμη είναι έτοιμη να υποδεχτεί τα δεδομένα και τα προγράμματα της ομαδικής εργασίας MoMA.")
